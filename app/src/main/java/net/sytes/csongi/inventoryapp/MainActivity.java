package net.sytes.csongi.inventoryapp;

import android.app.LoaderManager;
import android.content.ContentUris;
import android.content.Context;
import android.content.CursorLoader;
import android.content.Intent;
import android.content.Loader;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.CursorAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.RelativeLayout;

import net.sytes.csongi.inventoryapp.data.InventoryContract;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.Unbinder;

public class MainActivity extends AppCompatActivity {

    private static final String LOG_TAG = MainActivity.class.getSimpleName();
    private static final int PRODUCT_LOADER = 59;

    private Unbinder unbinder;
    @BindView(R.id.product_list_view)
    ListView mListView;
    @BindView(R.id.list_is_empty)
    View mListIsEmptyImage;
    @BindView(R.id.fab_new_product)
    FloatingActionButton mFabNewProduct;
    private CursorAdapter mCursorAdapter;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        unbinder = ButterKnife.bind(this);

        // declaring loader callbacks
        LoaderManager.LoaderCallbacks<Cursor> productLoaderCallback = new LoaderManager.LoaderCallbacks<Cursor>() {
            /**
             * Instantiate and return a new Loader for the given ID.
             *
             * @param id   The ID whose loader is to be created.
             * @param args Any arguments supplied by the caller.
             * @return Return a new Loader instance that is ready to start loading.
             */
            @Override
            public Loader<Cursor> onCreateLoader(int id, Bundle args) {
                return new CursorLoader(getApplicationContext(),InventoryContract.ProductEntry.CONTENT_URI,null,null,null,null);
            }

            /**
             *
             * @param loader The Loader that has finished.
             * @param data   The data generated by the Loader.
             */
            @Override
            public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
                mCursorAdapter.swapCursor(data);
            }

            /**
             * Called when a previously created loader is being reset, and thus
             * making its data unavailable.  The application should at this point
             * remove any references it has to the Loader's data.
             *
             * @param loader The Loader that is being reset.
             */
            @Override
            public void onLoaderReset(Loader<Cursor> loader) {
                mCursorAdapter.swapCursor(null);
            }
        };

        mListView.setEmptyView(mListIsEmptyImage);
        mFabNewProduct.setOnClickListener(v -> {
            Intent addNewProductIntent = new Intent(getApplicationContext(), ProductEditActivity.class);
            startActivity(addNewProductIntent);
        });

        mCursorAdapter=new ProductCursorAdapter(this,null);
        mListView.setAdapter(mCursorAdapter);

        mListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                Uri uriToQuery= ContentUris.withAppendedId(InventoryContract.ProductEntry.CONTENT_URI,id);
                Intent editProduct=new Intent(MainActivity.this,ProductDetailsAcitvity.class);
                editProduct.setDataAndType(uriToQuery, InventoryContract.ProductEntry.CONTENT_ITEM_TYPE);
                startActivity(editProduct);
            }
        });

        getLoaderManager().initLoader(PRODUCT_LOADER,null,productLoaderCallback);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main_menu, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int menuItemId = item.getItemId();
        switch (menuItemId) {
            case R.id.edit_suppliers:
                Log.d(LOG_TAG, "suppliers menu item selected");
                Intent intent = new Intent(getApplicationContext(), SuppliersListActivity.class);
                startActivity(intent);
                return true;
            default:
                Log.d(LOG_TAG, "nothing happened");
                return super.onOptionsItemSelected(item);
        }
    }



}
