package net.sytes.csongi.inventoryapp;

import android.app.LoaderManager;
import android.content.ContentUris;
import android.content.Context;
import android.content.CursorLoader;
import android.content.Intent;
import android.content.Loader;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.CursorAdapter;
import android.widget.ListView;
import android.widget.TextView;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.Unbinder;

import static net.sytes.csongi.inventoryapp.data.InventoryContract.*;

public class MainActivity extends AppCompatActivity implements LoaderManager.LoaderCallbacks<Cursor> {

    private static final String TAG = MainActivity.class.getSimpleName();
    private static final int PRODUCT_LOADER = 59;
    private static final int SUPPLIER_LOADER = 979;

    private Unbinder unbinder;
    @BindView(R.id.product_list_view)
    ListView mListView;
    @BindView(R.id.list_is_empty)
    View mListIsEmptyImage;
    @BindView(R.id.fab_new_product)
    FloatingActionButton mFabNewProduct;
    @BindView(R.id.list_is_empty_text)
    TextView mMessageTextField;
    private CursorAdapter mCursorAdapter;
    private LoaderManager.LoaderCallbacks mLoaderCallbacks;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        unbinder = ButterKnife.bind(this);

        // setting up empty listView
        mListView.setEmptyView(mListIsEmptyImage);

        // set up FAB button to add new product
        mFabNewProduct.setOnClickListener(v -> {
            Intent addNewProductIntent = new Intent(getApplicationContext(), ProductEditActivity.class);
            startActivity(addNewProductIntent);
        });

        // setting up cursorAdapter and assign it to listView
        mCursorAdapter = new ProductCursorAdapter(this, null);
        mListView.setAdapter(mCursorAdapter);

        // set up itemClickListener
        mListView.setOnItemClickListener((parent, view, position, id) -> {
            Log.i(TAG, "onCreate:: mListView OnClick event. id: "+id);
            Uri uriToQuery = ContentUris.withAppendedId(ProductEntry.CONTENT_URI, id);
            Intent editProduct = new Intent(MainActivity.this, ProductDetailsAcitvity.class);
            editProduct.setDataAndType(uriToQuery, ProductEntry.CONTENT_ITEM_TYPE);
            startActivity(editProduct);
        });

        // start loading the product list
        getLoaderManager().initLoader(PRODUCT_LOADER, null, MainActivity.this);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main_menu, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int menuItemId = item.getItemId();
        switch (menuItemId) {
            case R.id.edit_suppliers:
                Log.d(TAG, "suppliers menu item selected");
                Intent intent = new Intent(getApplicationContext(), SuppliersListActivity.class);
                startActivity(intent);
                return true;
            default:
                Log.d(TAG, "nothing happened");
                return super.onOptionsItemSelected(item);
        }
    }


    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param id   The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @Override
    public Loader<Cursor> onCreateLoader(int id, Bundle args) {
        switch (id) {
            case PRODUCT_LOADER:
                return new CursorLoader(getApplicationContext(), ProductEntry.CONTENT_URI, null, null, null, null);
            case SUPPLIER_LOADER:
                return new CursorLoader(getApplicationContext(), SupplierEntry.CONTENT_URI, null, null, null, null);
        }
        return null;
    }

    /**
     *
     * @param loader The Loader that has finished.
     * @param data   The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
        switch (loader.getId()) {
            case PRODUCT_LOADER:
                // first we check whether Product Cursor has at least one item
                if (data.moveToFirst()) {
                    mCursorAdapter.swapCursor(data);
                } else {
                    // there are no products. Set up welcome message and start a loader for suppliers
                    getLoaderManager().initLoader(SUPPLIER_LOADER,null,MainActivity.this).forceLoad();
                    mMessageTextField.setText(R.string.main_activity_message_product_list_empty);
                }
                break;
            case SUPPLIER_LOADER:
                // if Supplier's Cursor has no data change welcome message with another instructions
                if(!data.moveToFirst())
                    mMessageTextField.setText(R.string.main_activity_message_empty_supplier_list);
        }
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<Cursor> loader) {
        Log.i(TAG, "onLoaderReset:: called");
        if(loader.getId()==PRODUCT_LOADER)
            mCursorAdapter.swapCursor(null);
    }
}
